import com.sun.xml.internal.bind.v2.runtime.unmarshaller.XsiNilLoader;
import java.awt.Color;
import java.util.Random;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Kausik N
 */
public class Maze_BasicThreadedGen_BasicGUI extends javax.swing.JFrame {

    /**
     * Creates new form Maze_BasicGen_BasicGUI
     */
    public Maze_BasicThreadedGen_BasicGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Background_Panel = new javax.swing.JPanel();
        Back_Label = new javax.swing.JLabel();
        Title_Label = new javax.swing.JLabel();
        Left_Label = new javax.swing.JLabel();
        Right_Label = new javax.swing.JLabel();
        Front_Label = new javax.swing.JLabel();
        Left_Button = new javax.swing.JButton();
        Front_Button = new javax.swing.JButton();
        Back_Button = new javax.swing.JButton();
        Right_Button = new javax.swing.JButton();
        GenerateMaze_Button = new javax.swing.JButton();
        SolutionMaze_Button = new javax.swing.JButton();
        RestartMaze_Button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        Background_Panel.setBackground(new java.awt.Color(0, 0, 0));

        Back_Label.setBackground(new java.awt.Color(102, 0, 0));
        Back_Label.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        Back_Label.setForeground(new java.awt.Color(0, 255, 204));
        Back_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Back_Label.setText("B");
        Back_Label.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 0, 0)));

        Title_Label.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        Title_Label.setForeground(new java.awt.Color(0, 255, 204));
        Title_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title_Label.setText("MAZE RUNNER");

        Left_Label.setBackground(new java.awt.Color(102, 0, 0));
        Left_Label.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        Left_Label.setForeground(new java.awt.Color(0, 255, 204));
        Left_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Left_Label.setText("L");
        Left_Label.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 0, 0)));

        Right_Label.setBackground(new java.awt.Color(102, 0, 0));
        Right_Label.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        Right_Label.setForeground(new java.awt.Color(0, 255, 204));
        Right_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Right_Label.setText("R");
        Right_Label.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 0, 0)));

        Front_Label.setBackground(new java.awt.Color(102, 0, 0));
        Front_Label.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        Front_Label.setForeground(new java.awt.Color(0, 255, 204));
        Front_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Front_Label.setText("F");
        Front_Label.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 0, 0)));

        Left_Button.setBackground(new java.awt.Color(0, 0, 0));
        Left_Button.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        Left_Button.setForeground(new java.awt.Color(0, 204, 204));
        Left_Button.setText("Go");
        Left_Button.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 204, 204)));
        Left_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Left_ButtonActionPerformed(evt);
            }
        });

        Front_Button.setBackground(new java.awt.Color(0, 0, 0));
        Front_Button.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        Front_Button.setForeground(new java.awt.Color(0, 204, 204));
        Front_Button.setText("Go");
        Front_Button.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 204, 204)));
        Front_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Front_ButtonActionPerformed(evt);
            }
        });

        Back_Button.setBackground(new java.awt.Color(0, 0, 0));
        Back_Button.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        Back_Button.setForeground(new java.awt.Color(0, 204, 204));
        Back_Button.setText("Go");
        Back_Button.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 204, 204)));
        Back_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Back_ButtonActionPerformed(evt);
            }
        });

        Right_Button.setBackground(new java.awt.Color(0, 0, 0));
        Right_Button.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        Right_Button.setForeground(new java.awt.Color(0, 204, 204));
        Right_Button.setText("Go");
        Right_Button.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 204, 204)));
        Right_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Right_ButtonActionPerformed(evt);
            }
        });

        GenerateMaze_Button.setBackground(new java.awt.Color(0, 0, 0));
        GenerateMaze_Button.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        GenerateMaze_Button.setForeground(new java.awt.Color(0, 204, 204));
        GenerateMaze_Button.setText("Generate New Maze");
        GenerateMaze_Button.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 204, 204)));
        GenerateMaze_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateMaze_ButtonActionPerformed(evt);
            }
        });

        SolutionMaze_Button.setBackground(new java.awt.Color(0, 0, 0));
        SolutionMaze_Button.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        SolutionMaze_Button.setForeground(new java.awt.Color(0, 204, 204));
        SolutionMaze_Button.setText("Solution");
        SolutionMaze_Button.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 204, 204)));
        SolutionMaze_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SolutionMaze_ButtonActionPerformed(evt);
            }
        });

        RestartMaze_Button.setBackground(new java.awt.Color(0, 0, 0));
        RestartMaze_Button.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        RestartMaze_Button.setForeground(new java.awt.Color(0, 204, 204));
        RestartMaze_Button.setText("Restart Maze");
        RestartMaze_Button.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 204, 204)));
        RestartMaze_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestartMaze_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Background_PanelLayout = new javax.swing.GroupLayout(Background_Panel);
        Background_Panel.setLayout(Background_PanelLayout);
        Background_PanelLayout.setHorizontalGroup(
            Background_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Background_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Background_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Background_PanelLayout.createSequentialGroup()
                        .addComponent(Left_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Front_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(256, 256, 256)
                        .addComponent(Right_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Background_PanelLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(Background_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Background_PanelLayout.createSequentialGroup()
                                .addComponent(Title_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(356, 356, 356))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Background_PanelLayout.createSequentialGroup()
                                .addGroup(Background_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(Front_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(Background_PanelLayout.createSequentialGroup()
                                        .addGroup(Background_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Left_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(Background_PanelLayout.createSequentialGroup()
                                                .addGap(96, 96, 96)
                                                .addComponent(GenerateMaze_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                                        .addGroup(Background_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(Back_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(SolutionMaze_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(Background_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(Background_PanelLayout.createSequentialGroup()
                                        .addGap(261, 261, 261)
                                        .addComponent(Right_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(Background_PanelLayout.createSequentialGroup()
                                        .addGap(104, 104, 104)
                                        .addComponent(RestartMaze_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(61, 61, 61))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Background_PanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Back_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(449, 449, 449))
        );
        Background_PanelLayout.setVerticalGroup(
            Background_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Background_PanelLayout.createSequentialGroup()
                .addComponent(Title_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(Background_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Background_PanelLayout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(Right_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Right_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Background_PanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Front_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Front_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(Back_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Background_PanelLayout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(Left_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Left_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Back_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 116, Short.MAX_VALUE)
                .addGroup(Background_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GenerateMaze_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SolutionMaze_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RestartMaze_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Background_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Background_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    Random random = new Random();
    
    public class PathTreeNode
    {
        // Node Properties
        String id;
        int no_of_children;
        PathTreeNode[] children;
        PathTreeNode parent;
        // Node Properties
        
        // Game Params
        boolean final_node;
        // Game Params
        
        public PathTreeNode(String id_param, int no_of_children_param, PathTreeNode[] children_param, PathTreeNode parent_param, boolean final_node_param)
        {
            id = id_param;
            no_of_children = no_of_children_param;
            
            if(children_param != null)
            { 
                children = new PathTreeNode[children_param.length];
                System.arraycopy(children_param, 0, children, 0, children_param.length);
            }
//            if(children_param != null)
//            {
//                children = new PathTreeNode[children_param.length];
//                for(int i=0;i<children_param.length;i++)
//                {
//                    children[i] = children_param[i];
//                }
//            }
            else children = null;
            
            parent = parent_param;
            
            final_node = final_node_param;
        }
    }
    
    public class PathTree extends Thread
    {
        // Params
        int max_tree_depth;                      // Maximum depth of the maze -- height of pathtree
        
        float dead_end_probability;         // Probability that the current node can be a dead end -- no branches
        
        int max_branches;                   // Maximum number of branches in current node
        float branch_formation_probability; // Probability that the current branch is formed in current node -- whether the branch will exist or not for the node
        float cycle_formation_probability;  // Probability that the current branch of the current node connects to a preexisting node -- forming a cycle
        //Params
        
        // Tree
        PathTreeNode RootNode;
        int current_tree_depth;
        int no_of_nodes;
        // Tree
        
        // Game Params
        int no_of_final_nodes;
        String[] final_node_ids;
        // Game Params
        
        // Internal Params
        String[] nodes_displayed;
        // Internal Params
        
        
        public PathTree()
        {
            
        }
        
        void InitPathTreeParameters(int max_tree_depth_param, float dead_end_probability_param, 
                int max_branches_param, float branch_formation_probability_param, float cycle_formation_probability_param, 
                int no_of_final_nodes_param)
        {
            max_tree_depth = max_tree_depth_param;
            dead_end_probability = dead_end_probability_param;
            
            max_branches = max_branches_param;
            branch_formation_probability = branch_formation_probability_param;
            cycle_formation_probability = cycle_formation_probability_param;
            
            no_of_final_nodes = no_of_final_nodes_param;
            
            no_of_nodes = 0;
        }
        
        void GeneratePathTree()
        {
            int no_of_threads = max_branches;
            // Init
            current_tree_depth = 0;
            
            // Generate
            RootNode = new PathTreeNode("0", no_of_threads, new PathTreeNode[no_of_threads], null, false);
            PathTreeNode[] GeneratedNodes = new PathTreeNode[no_of_threads];
            Thread[] t = new Thread[no_of_threads];
            PathTree[] pathgen_thread_class = new PathTree[no_of_threads];
            for(int i=0;i<no_of_threads;i++)
            {
                pathgen_thread_class[i] = new PathTree();
                CopyClass(pathgen_thread_class[i], "0_" + i, RootNode, 1);
                
                t[i] = pathgen_thread_class[i];
                t[i].start();
            }
            
            for(int i=0;i<no_of_threads;i++)
            {
                try
                {
                    while(t[i].isAlive());  // Wait till thread completes
                    
                    current_tree_depth = pathgen_thread_class[i].current_tree_depth > current_tree_depth ? pathgen_thread_class[i].current_tree_depth : current_tree_depth;
                    no_of_nodes = no_of_nodes + pathgen_thread_class[i].no_of_nodes;
                    RootNode.children[i] = pathgen_thread_class[i].currentthread_generatedpath;
                    //t[i].join();
                }
                catch(Exception e)
                {
                    System.out.println("Thread Prematurely Interrupted.");
                }
            }
            
            // Init displayed nodes
            nodes_displayed = new String[no_of_nodes + 1];
            for(int i=0;i<no_of_nodes + 1;i++)
            {
                nodes_displayed[i] = null;             
            }
            
            // Set Final Nodes and store ids
            SetFinalNodes();
        }
        
        String currentthread_id;
        PathTreeNode currentthread_parent;
        int currentthread_depth;
        
        PathTreeNode currentthread_generatedpath;
        
        public void run()
        {
            System.out.println("Thread Started.");
            currentthread_generatedpath = GeneratePathTree_Recursive(currentthread_id, currentthread_parent, currentthread_depth);
        }
        
        PathTreeNode GeneratePathTree_Recursive(String id, PathTreeNode parent, int depth)
        {
            if(depth <= max_tree_depth)
            {
                int no_of_children = 0;
                int[] children_present = GenerateChildren();    // if null - dead end || if 1 - child at position present || if 0 - child at position not present
                // Dead End
                if(children_present == null)
                {
                    PathTreeNode newNode = new PathTreeNode(id, 0, new PathTreeNode[max_branches], parent, false);
                    for(int i=0;i<max_branches;i++)
                    {
                        newNode.children[i] = null;
                    }
                    no_of_nodes = no_of_nodes + 1;
                    return newNode;
                }
                // Non Dead End
                for(int i=0;i<max_branches;i++)
                {
                    if(children_present[i] == 1) no_of_children = no_of_children + 1;
                }

                PathTreeNode newNode = new PathTreeNode(id, no_of_children, new PathTreeNode[max_branches], parent, false);
                for(int i=0;i<max_branches;i++)
                {
                    if(children_present[i] == 1)
                    { 
                        if(random.nextInt(100 + 1) <= (cycle_formation_probability*100))    // For Cycle child node
                        {
                            newNode.children[i] = GetRandomDestinationNode(id + "_" + i, 0);
                        }
                        else newNode.children[i] = GeneratePathTree_Recursive(id + "_" + i, newNode, depth+1);  // For normal child node
                    }
                    else newNode.children[i] = null;    // For no child node
                }
                current_tree_depth = current_tree_depth + 1;
                no_of_nodes = no_of_nodes + 1;
                return newNode;
            }
            return null;
        }
        
        void SetFinalNodes()
        {
            System.out.println("Choosing Final Nodes...");
            if(no_of_final_nodes > no_of_nodes) no_of_final_nodes = no_of_nodes;
            
            final_node_ids = new String[no_of_final_nodes];
            
            PathTreeNode finalnode;
            String id = "";
            for(int i=0;i<no_of_final_nodes;i++)
            {
                finalnode = GetRandomDestinationNode(id, max_tree_depth-1);
                while(finalnode == null || finalnode.final_node == true)
                {
                    finalnode = GetRandomDestinationNode(id, max_tree_depth-1);
//                    if(finalnode != null) id = finalnode.id;
                }
                finalnode.final_node = true;
                final_node_ids[i] = finalnode.id;
            }
        }
        
        int[] GenerateChildren()
        {
            // Check for Dead End
            if(random.nextInt(100 + 1) <= (dead_end_probability*100))
            {
                return null;
            }
            else
            {
                int[] child_present = new int[max_branches];
                for(int i=0;i<max_branches;i++)
                {
                    if(random.nextInt(100 + 1) <= (branch_formation_probability*100))
                    {
                        child_present[i] = 1;
                    }
                    else child_present[i] = 0;
                }
                return child_present;
            }
        }
        
        PathTreeNode GetNode_FromID(String id)
        {
            PathTreeNode CurrentNode = RootNode;
            
            int str_index = 0;
            String node = "";
            while(str_index < id.length())
            {
                if(id.charAt(str_index) != '_') node = node + id.charAt(str_index);
                if(id.charAt(str_index) == '_' || str_index == id.length() - 1)
                {
                    int branch_no = Integer.parseInt(node);
                    
                    if(CurrentNode.children[branch_no].id.equals(id)) return CurrentNode.children[branch_no];   // Return Dest Node
                    CurrentNode = CurrentNode.children[branch_no];

//                    for(int i=0;i<max_branches;i++)
//                    {
//                        if(CurrentNode.children[i] != null)
//                        {
//                            branch_no = branch_no - 1;
//                            if(branch_no == 0)
//                            {
//                                if(CurrentNode.children[i].id.equals(id)) return CurrentNode.children[i];   // Return Dest Node
//
//                                CurrentNode = CurrentNode.children[i];
//                                i = max_branches;   // BREAK
//                            }
//                        }
//                    }
                    node = "";
                }
                str_index = str_index + 1;
            }
            return CurrentNode;
        }
        
        PathTreeNode GetRandomDestinationNode(String src_id, int min_depth)
        {
            PathTreeNode CurrentNode = RootNode;
            int random_depth = random.nextInt(max_tree_depth - min_depth) + 1 + min_depth;
            while(random_depth > 0)
            {
                if(CurrentNode == null || CurrentNode.no_of_children == 0) return CurrentNode; // If Terminal Node return it
                
                int random_child = random.nextInt(CurrentNode.no_of_children + 1);
                for(int i=0;i<max_branches;i++)
                {
                    if(CurrentNode.children[i] != null)
                    {
                        random_child = random_child - 1;
                        if(random_child == 0)
                        {
                            if(CurrentNode.children[i].id.equals(src_id)) return CurrentNode;   // If going to same node change to the parent instead -- node cant go to same node
                            
                            CurrentNode = CurrentNode.children[i];
                            i = max_branches;   // BREAK
                        }
                    }
                }
                random_depth = random_depth - 1;
            }
            return CurrentNode;
        }
        
        
        void DisplayPathTree(PathTreeNode p, int depth)
        {
            if(p != null)
            {
                boolean already_displayed = false;
                int null_index = -1;
                for(int i=0;i<no_of_nodes + 1;i++)
                {
                    if(nodes_displayed[i] == null && null_index == -1) null_index = i;
                    else if(nodes_displayed[i] != null && nodes_displayed[i].equals(p.id)) already_displayed = true;
                }
                if(!already_displayed)
                {
//                    System.out.println("NULL INDEX: " + null_index + " / " + no_of_nodes);
                    nodes_displayed[null_index] = p.id;
                    
                    if(p.final_node) System.out.println(depth + " - " + p.id + " : final");
                    else System.out.println(depth + " - " + p.id);
                    for(int i=0;i<max_branches;i++)
                    {
                        if(p.children[i] != null)
                        {
                            DisplayPathTree(p.children[i], depth + 1);
                        }
                    }
                }
            }
        }
        
        void DisplayFinishPaths()
        {
            for(int i=0;i<no_of_final_nodes;i++)
            {
                System.out.println("Finish Path: " + (i+1));

                int str_index = 0;
                String node = "";
                while(str_index < final_node_ids[i].length())
                {
                    if(final_node_ids[i].charAt(str_index) != '_') node = node + final_node_ids[i].charAt(str_index);
                    if(final_node_ids[i].charAt(str_index) == '_' || str_index == final_node_ids[i].length() - 1)
                    {
                        System.out.print(node + " -> ");
                        node = "";
                    }
                    str_index = str_index + 1;
                }
                System.out.print("finish");
                System.out.println("");
            }
        }
        
        void DisplayNodeProperties(PathTreeNode node)
        {
            System.out.println("Node: ");
            System.out.println("\tID: " + node.id);
            System.out.println("\tNo of children: " + node.no_of_children);
            System.out.println("\tChildren: ");
            for(int i=0;i<max_branches;i++)
            {
                if(node.children[i] != null) System.out.println("\t\t" + node.id + "_" + i + " : " + node.children[i].id);
                else System.out.println("\t\t" + node.id + "_" + i + " : " + "null");
            }
            System.out.println("\tFinal: " + node.final_node);
        }
        
        void CopyClass(PathTree p, String newId, PathTreeNode newParent, int newDepth)
        {
            p.InitPathTreeParameters(max_tree_depth, dead_end_probability, max_branches, branch_formation_probability, cycle_formation_probability, no_of_final_nodes);

            p.currentthread_id = newId;
            p.currentthread_depth = newDepth;
            //p.currentthread_generatedpath = currentthread_generatedpath;
            p.currentthread_parent = newParent;

            p.RootNode = RootNode;
            p.current_tree_depth = current_tree_depth;
            p.no_of_nodes = no_of_nodes;
            p.no_of_final_nodes = no_of_final_nodes;
            p.final_node_ids = final_node_ids;
        }
    }
    
    public class MazeNavigate
    {
        // Player Params
        PathTree maze;
        PathTreeNode CurrentNode;
        // Player Params
        
        // Game Properties
        GUIProperties GUI;
        // Game Properties
        
        public MazeNavigate(PathTree maze_param, GUIProperties GUI_param)
        {
            maze = maze_param;
            CurrentNode = maze.RootNode;
            
            GUI = GUI_param;
        }
        
        PathTreeNode Move(boolean goBack, int move_to_branch)
        {
            if(CurrentNode == null) 
            {
                return null;
            }
            
            if(goBack)
            {
                if(CurrentNode.parent != null) CurrentNode = CurrentNode.parent;
                return CurrentNode;
            }
            else 
            {
                int branch_no = move_to_branch;
                CurrentNode = CurrentNode.children[branch_no];
//                for(int i=0;i<maze.max_branches;i++)
//                {
//                    if(CurrentNode.children[i] != null)
//                    {
//                        if(branch_no == 0)
//                        {
//                            CurrentNode = CurrentNode.children[i];
//                            i = maze.max_branches;   // BREAK
//                        }
//                        branch_no = branch_no - 1;
//                    }
//                }
                return CurrentNode;
            }
        }
        
        void UpdateGUI()
        {
            // Parent
            if(CurrentNode.parent != null)
            { 
                GUI.goBack_Label.setBackground(Color.WHITE);
                GUI.goBack_Button.setEnabled(true);
            }
            else 
            {
                GUI.goBack_Label.setBackground(Color.BLACK);
                GUI.goBack_Button.setEnabled(false);
            }
            
            // Branches
            for(int i=0;i<GUI.max_branches;i++)
            {
                if(CurrentNode.children[i] != null)
                { 
                    GUI.Displays[i].setBackground(Color.WHITE);
                    GUI.Buttons[i].setEnabled(true);
                }
                else 
                {
                    GUI.Displays[i].setBackground(Color.BLACK);
                    GUI.Buttons[i].setEnabled(false);
                }
            }
        }
        
        void CheckFinishGame()
        {
            if(CurrentNode.final_node)
            {
                String confirmText = "Congrats! You reached finish point!\n";
                confirmText = confirmText + "Click 'Yes' to Play a different Maze.\n";
                confirmText = confirmText + "Click 'No' to restart the Maze.\n";
                confirmText = confirmText + "Click 'Cancel' to explore more of the same Maze.";
                int reply = JOptionPane.showConfirmDialog(Background_Panel, confirmText);
                if(reply == 0)
                {
                    System.out.println("Reply: 0");
                    
                    System.out.println("----------------------------------------------");
                    GenerateMaze_Button.doClick();
                    RestartMaze_Button.doClick();
                }
                else if(reply == 1)
                {
                    System.out.println("Reply: 1");

                    RestartMaze_Button.doClick();
                }
                else if(reply == 2)
                {
                    System.out.println("Reply: 2");
                }
            }
        }
    }
    
    public class GUIProperties
    {
        // GUI Elements
        int max_branches;
        JLabel[] Displays;
        JButton[] Buttons;
        
        JLabel goBack_Label;
        JButton goBack_Button;
        // GUI Elements
        
        public GUIProperties(int max_branches_param, JLabel[] Displays_param, JButton[] Buttons_param, JLabel goBack_Label_param, JButton goBack_Button_param)
        {
            max_branches = max_branches_param;
            Displays = Displays_param;
            Buttons = Buttons_param;
            
            goBack_Label = goBack_Label_param;
            goBack_Button = goBack_Button_param;
        }
    }
    
    PathTree Maze;
    PathTreeNode PlayerNode;
    MazeNavigate game;
    GUIProperties GUI;
    
    private void GenerateMaze_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateMaze_ButtonActionPerformed
    System.out.println("----------------------------------------------");
    System.out.println("Generating new maze...");
    
    Maze = new PathTree();
    
//  Path Tree Parameters - 
//  int max_tree_depth_param, float dead_end_probability_param, 
//  int max_branches_param, float branch_formation_probability_param, float cycle_formation_probability_param, 
//  int no_of_final_nodes_param

    Maze.InitPathTreeParameters(5, 0.0f, 3, 0.5f, 0.0f, 1);
    
    Maze.GeneratePathTree();
    
    System.out.println("Displaying Path Tree...");
    Maze.DisplayPathTree(Maze.RootNode, 1);
    }//GEN-LAST:event_GenerateMaze_ButtonActionPerformed

    private void SolutionMaze_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SolutionMaze_ButtonActionPerformed
    System.out.println("Displaying Solutions to Maze...");
    
    Maze.DisplayFinishPaths();
    }//GEN-LAST:event_SolutionMaze_ButtonActionPerformed

    private void RestartMaze_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestartMaze_ButtonActionPerformed
    System.out.println("Restarting Maze...");
        
    // Init GUI
    JLabel[] Displays = {Left_Label, Front_Label, Right_Label};
    JButton[] Buttons = {Left_Button, Front_Button, Right_Button};
    GUI = new GUIProperties(Maze.max_branches, Displays, Buttons, Back_Label, Back_Button);
    
    // Init Navigation
    PlayerNode = Maze.RootNode;
    game = new MazeNavigate(Maze, GUI);
    game.UpdateGUI();
    Maze.DisplayNodeProperties(PlayerNode);
    game.CheckFinishGame();
    }//GEN-LAST:event_RestartMaze_ButtonActionPerformed

    private void Back_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Back_ButtonActionPerformed
    PlayerNode = game.Move(true, -1);
    game.UpdateGUI();
    Maze.DisplayNodeProperties(PlayerNode);
    game.CheckFinishGame();
    }//GEN-LAST:event_Back_ButtonActionPerformed

    private void Front_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Front_ButtonActionPerformed
    PlayerNode = game.Move(false, 1);
    game.UpdateGUI();
    Maze.DisplayNodeProperties(PlayerNode);
    game.CheckFinishGame();
    }//GEN-LAST:event_Front_ButtonActionPerformed

    private void Left_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Left_ButtonActionPerformed
    PlayerNode = game.Move(false, 0);
    game.UpdateGUI();
    Maze.DisplayNodeProperties(PlayerNode);
    game.CheckFinishGame();
    }//GEN-LAST:event_Left_ButtonActionPerformed

    private void Right_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Right_ButtonActionPerformed
    PlayerNode = game.Move(false, 2);
    game.UpdateGUI();
    Maze.DisplayNodeProperties(PlayerNode);
    game.CheckFinishGame();
    }//GEN-LAST:event_Right_ButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
    Front_Button.setEnabled(false);
    Left_Button.setEnabled(false);
    Right_Button.setEnabled(false);
    Back_Button.setEnabled(false);
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Maze_BasicGen_BasicGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Maze_BasicGen_BasicGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Maze_BasicGen_BasicGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Maze_BasicGen_BasicGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Maze_BasicThreadedGen_BasicGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back_Button;
    private javax.swing.JLabel Back_Label;
    private javax.swing.JPanel Background_Panel;
    private javax.swing.JButton Front_Button;
    private javax.swing.JLabel Front_Label;
    private javax.swing.JButton GenerateMaze_Button;
    private javax.swing.JButton Left_Button;
    private javax.swing.JLabel Left_Label;
    private javax.swing.JButton RestartMaze_Button;
    private javax.swing.JButton Right_Button;
    private javax.swing.JLabel Right_Label;
    private javax.swing.JButton SolutionMaze_Button;
    private javax.swing.JLabel Title_Label;
    // End of variables declaration//GEN-END:variables
}
